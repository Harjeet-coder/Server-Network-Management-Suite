// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package generaldb

import (
	"context"
	"time"
)

const cleanExpiredSessions = `-- name: CleanExpiredSessions :exec
DELETE FROM user_sessions 
WHERE expires_at < now()
`

func (q *Queries) CleanExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanExpiredSessions)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM user_sessions 
WHERE refresh_token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, refreshToken)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT username, expires_at 
FROM user_sessions 
WHERE refresh_token = $1 AND expires_at > now()
`

type GetRefreshTokenRow struct {
	Username  string    `db:"username" json:"username"`
	ExpiresAt time.Time `db:"expires_at" json:"expires_at"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var i GetRefreshTokenRow
	err := row.Scan(&i.Username, &i.ExpiresAt)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, role, email, password_hash 
FROM users 
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getValidRefreshTokenByUser = `-- name: GetValidRefreshTokenByUser :one
SELECT refresh_token, expires_at, created_at
FROM user_sessions 
WHERE username = $1 AND expires_at > now()
ORDER BY created_at DESC
LIMIT 1
`

type GetValidRefreshTokenByUserRow struct {
	RefreshToken string    `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    time.Time `db:"expires_at" json:"expires_at"`
	CreatedAt    time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) GetValidRefreshTokenByUser(ctx context.Context, username string) (GetValidRefreshTokenByUserRow, error) {
	row := q.db.QueryRowContext(ctx, getValidRefreshTokenByUser, username)
	var i GetValidRefreshTokenByUserRow
	err := row.Scan(&i.RefreshToken, &i.ExpiresAt, &i.CreatedAt)
	return i, err
}

const saveRefreshToken = `-- name: SaveRefreshToken :exec
INSERT INTO user_sessions (username, refresh_token, expires_at)
VALUES ($1, $2, $3)
`

type SaveRefreshTokenParams struct {
	Username     string    `db:"username" json:"username"`
	RefreshToken string    `db:"refresh_token" json:"refresh_token"`
	ExpiresAt    time.Time `db:"expires_at" json:"expires_at"`
}

func (q *Queries) SaveRefreshToken(ctx context.Context, arg SaveRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, saveRefreshToken, arg.Username, arg.RefreshToken, arg.ExpiresAt)
	return err
}
