// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: setting.sql

package generaldb

import (
	"context"

	"github.com/google/uuid"
)

const addMacAccess = `-- name: AddMacAccess :one
INSERT INTO mac_access_status (mac, status)
VALUES ($1, $2)
RETURNING id, mac, status, created_at, updated_at
`

type AddMacAccessParams struct {
	Mac    string `db:"mac" json:"mac"`
	Status string `db:"status" json:"status"`
}

func (q *Queries) AddMacAccess(ctx context.Context, arg AddMacAccessParams) (MacAccessStatus, error) {
	row := q.db.QueryRowContext(ctx, addMacAccess, arg.Mac, arg.Status)
	var i MacAccessStatus
	err := row.Scan(
		&i.ID,
		&i.Mac,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, role, email, password_hash)
VALUES ($1, $2, $3, $4)
RETURNING id, name, role, email
`

type CreateUserParams struct {
	Name         string `db:"name" json:"name"`
	Role         string `db:"role" json:"role"`
	Email        string `db:"email" json:"email"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
}

type CreateUserRow struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Name  string    `db:"name" json:"name"`
	Role  string    `db:"role" json:"role"`
	Email string    `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
	)
	return i, err
}

const deleteUserByName = `-- name: DeleteUserByName :exec
DELETE FROM users
WHERE name = $1
`

func (q *Queries) DeleteUserByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByName, name)
	return err
}

const removeMacAccess = `-- name: RemoveMacAccess :exec
DELETE FROM mac_access_status
WHERE mac = $1
`

func (q *Queries) RemoveMacAccess(ctx context.Context, mac string) error {
	_, err := q.db.ExecContext(ctx, removeMacAccess, mac)
	return err
}
