// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: config1.sql

package serverdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createServerDevice = `-- name: CreateServerDevice :one
INSERT INTO server_devices (ip, tag, os, access_token)
VALUES ($1, $2, $3, $4)
RETURNING id, ip, tag, os, created_at
`

type CreateServerDeviceParams struct {
	Ip          string         `db:"ip" json:"ip"`
	Tag         sql.NullString `db:"tag" json:"tag"`
	Os          sql.NullString `db:"os" json:"os"`
	AccessToken string         `db:"access_token" json:"access_token"`
}

type CreateServerDeviceRow struct {
	ID        uuid.UUID      `db:"id" json:"id"`
	Ip        string         `db:"ip" json:"ip"`
	Tag       sql.NullString `db:"tag" json:"tag"`
	Os        sql.NullString `db:"os" json:"os"`
	CreatedAt time.Time      `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateServerDevice(ctx context.Context, arg CreateServerDeviceParams) (CreateServerDeviceRow, error) {
	row := q.db.QueryRowContext(ctx, createServerDevice,
		arg.Ip,
		arg.Tag,
		arg.Os,
		arg.AccessToken,
	)
	var i CreateServerDeviceRow
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Tag,
		&i.Os,
		&i.CreatedAt,
	)
	return i, err
}

const deleteServerDevice = `-- name: DeleteServerDevice :exec
DELETE FROM server_devices 
WHERE ip = $1
`

func (q *Queries) DeleteServerDevice(ctx context.Context, ip string) error {
	_, err := q.db.ExecContext(ctx, deleteServerDevice, ip)
	return err
}

const getAllServerDevices = `-- name: GetAllServerDevices :many
SELECT id, ip, tag, os, created_at
FROM server_devices 
ORDER BY created_at ASC
`

type GetAllServerDevicesRow struct {
	ID        uuid.UUID      `db:"id" json:"id"`
	Ip        string         `db:"ip" json:"ip"`
	Tag       sql.NullString `db:"tag" json:"tag"`
	Os        sql.NullString `db:"os" json:"os"`
	CreatedAt time.Time      `db:"created_at" json:"created_at"`
}

func (q *Queries) GetAllServerDevices(ctx context.Context) ([]GetAllServerDevicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllServerDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllServerDevicesRow{}
	for rows.Next() {
		var i GetAllServerDevicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Ip,
			&i.Tag,
			&i.Os,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServerDeviceByIP = `-- name: GetServerDeviceByIP :one
SELECT id, ip, tag, os, access_token
FROM server_devices 
WHERE ip = $1
`

type GetServerDeviceByIPRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Ip          string         `db:"ip" json:"ip"`
	Tag         sql.NullString `db:"tag" json:"tag"`
	Os          sql.NullString `db:"os" json:"os"`
	AccessToken string         `db:"access_token" json:"access_token"`
}

func (q *Queries) GetServerDeviceByIP(ctx context.Context, ip string) (GetServerDeviceByIPRow, error) {
	row := q.db.QueryRowContext(ctx, getServerDeviceByIP, ip)
	var i GetServerDeviceByIPRow
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Tag,
		&i.Os,
		&i.AccessToken,
	)
	return i, err
}
